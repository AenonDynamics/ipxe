From f3ab557097dd1cc5e3989499990176858f4b3ec3 Mon Sep 17 00:00:00 2001
From: Hazel Smith <hazel.smith@leicester.ac.uk>
Date: Fri, 26 May 2017 09:54:22 +0100
Subject: [PATCH 01/14] Initial working static route support, with hard coded
 example static routes for testing

---
 src/include/ipxe/ip.h |  4 ++-
 src/net/ipv4.c        | 77 ++++++++++++++++++++++++++++++++++---------
 src/usr/route_ipv4.c  |  3 +-
 3 files changed, 67 insertions(+), 17 deletions(-)

diff --git a/src/include/ipxe/ip.h b/src/include/ipxe/ip.h
index 285be6dcd..32e86fef0 100644
--- a/src/include/ipxe/ip.h
+++ b/src/include/ipxe/ip.h
@@ -62,8 +62,10 @@ struct ipv4_miniroute {
 	/** Network device */
 	struct net_device *netdev;
 
-	/** IPv4 address */
+	/** IPv4 src address */
 	struct in_addr address;
+	/** IPv4 network address */
+	struct in_addr netaddr;
 	/** Subnet mask */
 	struct in_addr netmask;
 	/** Gateway address */
diff --git a/src/net/ipv4.c b/src/net/ipv4.c
index b9ce5e7f7..991d1ba43 100644
--- a/src/net/ipv4.c
+++ b/src/net/ipv4.c
@@ -82,14 +82,15 @@ static struct profiler ipv4_rx_profiler __profiler = { .name = "ipv4.rx" };
  * @ret rc		Return status code
  */
 static int add_ipv4_miniroute ( struct net_device *netdev,
-				struct in_addr address, struct in_addr netmask,
-				struct in_addr gateway ) {
+				struct in_addr address, struct in_addr netaddr,
+				struct in_addr netmask, struct in_addr gateway ) {
 	struct ipv4_miniroute *miniroute;
 
-	DBGC ( netdev, "IPv4 add %s", inet_ntoa ( address ) );
+	DBGC ( netdev, "IPv4 add %s", inet_ntoa ( netaddr ) );
 	DBGC ( netdev, "/%s ", inet_ntoa ( netmask ) );
 	if ( gateway.s_addr )
 		DBGC ( netdev, "gw %s ", inet_ntoa ( gateway ) );
+	DBGC ( netdev, "src %s ", inet_ntoa ( address ) );
 	DBGC ( netdev, "via %s\n", netdev->name );
 
 	/* Allocate and populate miniroute structure */
@@ -102,6 +103,7 @@ static int add_ipv4_miniroute ( struct net_device *netdev,
 	/* Record routing information */
 	miniroute->netdev = netdev_get ( netdev );
 	miniroute->address = address;
+	miniroute->netaddr = netaddr;
 	miniroute->netmask = netmask;
 	miniroute->gateway = gateway;
 		
@@ -125,10 +127,11 @@ static int add_ipv4_miniroute ( struct net_device *netdev,
 static void del_ipv4_miniroute ( struct ipv4_miniroute *miniroute ) {
 	struct net_device *netdev = miniroute->netdev;
 
-	DBGC ( netdev, "IPv4 del %s", inet_ntoa ( miniroute->address ) );
+	DBGC ( netdev, "IPv4 del %s", inet_ntoa ( miniroute->netaddr ) );
 	DBGC ( netdev, "/%s ", inet_ntoa ( miniroute->netmask ) );
 	if ( miniroute->gateway.s_addr )
 		DBGC ( netdev, "gw %s ", inet_ntoa ( miniroute->gateway ) );
+	DBGC ( netdev, "src %s ", inet_ntoa ( miniroute->address ) );
 	DBGC ( netdev, "via %s\n", miniroute->netdev->name );
 
 	netdev_put ( miniroute->netdev );
@@ -171,18 +174,14 @@ static struct ipv4_miniroute * ipv4_route ( unsigned int scope_id,
 			/* If destination is an on-link global
 			 * address, then use this route.
 			 */
-			if ( ( ( dest->s_addr ^ miniroute->address.s_addr )
+			if ( ( ( dest->s_addr ^ miniroute->netaddr.s_addr )
 			       & miniroute->netmask.s_addr ) == 0 )
+				// Is this via a gateway?
+				if ( miniroute->gateway.s_addr ) {
+					*dest = miniroute->gateway;
+				}
 				return miniroute;
 
-			/* If destination is an off-link global
-			 * address, and we have a default gateway,
-			 * then use this route.
-			 */
-			if ( miniroute->gateway.s_addr ) {
-				*dest = miniroute->gateway;
-				return miniroute;
-			}
 		}
 	}
 
@@ -823,9 +822,17 @@ const struct setting gateway_setting __setting ( SETTING_IP4, gateway ) = {
  */
 static int ipv4_gratuitous_arp ( struct net_device *netdev,
 				 struct in_addr address,
-				 struct in_addr netmask __unused,
+				 struct in_addr netaddr,
+				 struct in_addr netmask,
 				 struct in_addr gateway __unused ) {
 	int rc;
+	struct in_addr src_addr_truncated = { 0 };
+
+	/* Test if source address is outside destination network
+	   and do nothing if so  */
+	src_addr_truncated.s_addr = ( address.s_addr & netmask.s_addr );
+	if ( src_addr_truncated.s_addr != netaddr.s_addr )
+		return 0;
 
 	/* Do nothing if network device already has this IPv4 address */
 	if ( ipv4_has_addr ( netdev, address ) )
@@ -852,13 +859,22 @@ static int ipv4_gratuitous_arp ( struct net_device *netdev,
  */
 static int ipv4_settings ( int ( * apply ) ( struct net_device *netdev,
 					     struct in_addr address,
+					     struct in_addr netaddr,
 					     struct in_addr netmask,
 					     struct in_addr gateway ) ) {
 	struct net_device *netdev;
 	struct settings *settings;
 	struct in_addr address = { 0 };
+	struct in_addr netaddr = { 0 };
 	struct in_addr netmask = { 0 };
 	struct in_addr gateway = { 0 };
+	struct in_addr csr1_pixie_dest = { 0 };
+	struct in_addr csr1_pixie_mask = { 0 };
+	struct in_addr csr1_pixie_via = { 0 };
+	struct in_addr csr2_fae_dest = { 0 };
+	struct in_addr csr2_fae_mask = { 0 };
+	struct in_addr csr2_fae_via = { 0 };
+	struct in_addr zeroes_addr = { 0 }; // 0.0.0.0
 	int rc;
 
 	/* Process settings for each network device */
@@ -890,9 +906,40 @@ static int ipv4_settings ( int ( * apply ) ( struct net_device *netdev,
 		/* Get default gateway, if present */
 		fetch_ipv4_setting ( settings, &gateway_setting, &gateway );
 
+		/* Add extra miniroute */
+		if ( inet_aton ( "143.210.16.202", &csr1_pixie_dest ) == 0 )
+			return -EINVAL;
+		if ( inet_aton ( "255.255.255.255", &csr1_pixie_mask ) == 0 )
+			return -EINVAL;
+		if ( inet_aton ( "172.20.0.10", &csr1_pixie_via ) == 0 )
+			return -EINVAL;
+		if ( inet_aton ( "143.210.16.168", &csr2_fae_dest ) == 0 )
+			return -EINVAL;
+		if ( inet_aton ( "255.255.255.255", &csr2_fae_mask ) == 0 )
+			return -EINVAL;
+		if ( inet_aton ( "172.20.0.11", &csr2_fae_via ) == 0 )
+			return -EINVAL;
+
+		if ( ( rc = apply ( netdev, address, csr1_pixie_dest, csr1_pixie_mask, csr1_pixie_via ) ) != 0 )
+			return rc;
+
+		if ( ( rc = apply ( netdev, address, csr2_fae_dest, csr2_fae_mask, csr2_fae_via ) ) != 0 )
+			return rc;
+
+		/* Calculate netaddr */
+		netaddr.s_addr = ( address.s_addr & netmask.s_addr );
+
 		/* Apply settings */
-		if ( ( rc = apply ( netdev, address, netmask, gateway ) ) != 0 )
+		/* Create route for on-link traffic */
+		// netdev: netaddr/netmask via 0.0.0.0 (directly connected) src address
+		if ( ( rc = apply ( netdev, address, netaddr, netmask, zeroes_addr ) ) != 0 )
 			return rc;
+
+		/* Create route for off-link traffic */
+		// netdev: 0.0.0.0/0.0.0.0 via gateway src address
+		if ( ( rc = apply ( netdev, address, zeroes_addr, zeroes_addr, gateway ) ) != 0 )
+			return rc;
+
 	}
 
 	return 0;
diff --git a/src/usr/route_ipv4.c b/src/usr/route_ipv4.c
index 6260335ac..4c8b1e8f8 100644
--- a/src/usr/route_ipv4.c
+++ b/src/usr/route_ipv4.c
@@ -46,10 +46,11 @@ static void route_ipv4_print ( struct net_device *netdev ) {
 		if ( miniroute->netdev != netdev )
 			continue;
 		printf ( "%s: %s/", netdev->name,
-			 inet_ntoa ( miniroute->address ) );
+			 inet_ntoa ( miniroute->netaddr ) );
 		printf ( "%s", inet_ntoa ( miniroute->netmask ) );
 		if ( miniroute->gateway.s_addr )
 			printf ( " gw %s", inet_ntoa ( miniroute->gateway ) );
+		printf ( " src %s", inet_ntoa ( miniroute->address ) );
 		if ( ! netdev_is_open ( miniroute->netdev ) )
 			printf ( " (inaccessible)" );
 		printf ( "\n" );

From e3f7fbac4f25347c8244c8240cb5dcd66bb8ab4f Mon Sep 17 00:00:00 2001
From: Hazel Smith <hazel.smith@leicester.ac.uk>
Date: Fri, 26 May 2017 10:11:45 +0100
Subject: [PATCH 02/14] Tidy up static routing related comments so that they
 make more sense

---
 src/net/ipv4.c | 25 +++++++++++++++++--------
 1 file changed, 17 insertions(+), 8 deletions(-)

diff --git a/src/net/ipv4.c b/src/net/ipv4.c
index 991d1ba43..782427fb7 100644
--- a/src/net/ipv4.c
+++ b/src/net/ipv4.c
@@ -171,12 +171,16 @@ static struct ipv4_miniroute * ipv4_route ( unsigned int scope_id,
 
 		} else {
 
-			/* If destination is an on-link global
-			 * address, then use this route.
+			/* If the destination is global, and is within the
+			 * route's network (netaddr/netmask), then use this
+			 * route.
 			 */
 			if ( ( ( dest->s_addr ^ miniroute->netaddr.s_addr )
 			       & miniroute->netmask.s_addr ) == 0 )
-				// Is this via a gateway?
+				/* Is this via a gateway?
+				 *
+				 * If so, then set the next hop.
+				 */
 				if ( miniroute->gateway.s_addr ) {
 					*dest = miniroute->gateway;
 				}
@@ -929,14 +933,19 @@ static int ipv4_settings ( int ( * apply ) ( struct net_device *netdev,
 		/* Calculate netaddr */
 		netaddr.s_addr = ( address.s_addr & netmask.s_addr );
 
-		/* Apply settings */
-		/* Create route for on-link traffic */
-		// netdev: netaddr/netmask via 0.0.0.0 (directly connected) src address
+		/* Apply settings
+		 *
+		 * Firstly, create route for directly connected network
+		 *
+		 * netdev: netaddr/netmask via 0.0.0.0 (directly connected) src address
+		 */
 		if ( ( rc = apply ( netdev, address, netaddr, netmask, zeroes_addr ) ) != 0 )
 			return rc;
 
-		/* Create route for off-link traffic */
-		// netdev: 0.0.0.0/0.0.0.0 via gateway src address
+		/* Secondly, create route for default gateway address
+		 *
+		 * netdev: 0.0.0.0/0.0.0.0 via gateway src address
+		 */
 		if ( ( rc = apply ( netdev, address, zeroes_addr, zeroes_addr, gateway ) ) != 0 )
 			return rc;
 

From 1f571d804d421ff69c47ff92d1f29a72a4584ede Mon Sep 17 00:00:00 2001
From: Hazel Smith <hazel.smith@leicester.ac.uk>
Date: Fri, 26 May 2017 10:47:03 +0100
Subject: [PATCH 03/14] Only create default route if default gateway address is
 nonzero

---
 src/net/ipv4.c | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

diff --git a/src/net/ipv4.c b/src/net/ipv4.c
index 782427fb7..b8f746263 100644
--- a/src/net/ipv4.c
+++ b/src/net/ipv4.c
@@ -942,12 +942,15 @@ static int ipv4_settings ( int ( * apply ) ( struct net_device *netdev,
 		if ( ( rc = apply ( netdev, address, netaddr, netmask, zeroes_addr ) ) != 0 )
 			return rc;
 
-		/* Secondly, create route for default gateway address
+		/* Secondly, create route for default gateway address, *if and
+		 * only if* the interface *has* a default gateway address.
 		 *
 		 * netdev: 0.0.0.0/0.0.0.0 via gateway src address
 		 */
-		if ( ( rc = apply ( netdev, address, zeroes_addr, zeroes_addr, gateway ) ) != 0 )
-			return rc;
+		if ( gateway.s_addr ) {
+			if ( ( rc = apply ( netdev, address, zeroes_addr, zeroes_addr, gateway ) ) != 0 )
+				return rc;
+		}
 
 	}
 

From af4ead883c2507c0175e65e2bc426298f61afb35 Mon Sep 17 00:00:00 2001
From: Hazel Smith <hazel.smith@leicester.ac.uk>
Date: Fri, 26 May 2017 11:41:51 +0100
Subject: [PATCH 04/14] Change discard of non-local unicast packet debug
 messages to DBGC2 level

---
 src/net/ipv4.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/net/ipv4.c b/src/net/ipv4.c
index b8f746263..5340382dc 100644
--- a/src/net/ipv4.c
+++ b/src/net/ipv4.c
@@ -558,7 +558,7 @@ static int ipv4_rx ( struct io_buffer *iobuf,
 	     ( iphdr->dest.s_addr != INADDR_BROADCAST ) &&
 	     ipv4_has_any_addr ( netdev ) &&
 	     ( ! ipv4_has_addr ( netdev, iphdr->dest ) ) ) {
-		DBGC ( iphdr->src, "IPv4 discarding non-local unicast packet "
+		DBGC2 ( iphdr->src, "IPv4 discarding non-local unicast packet "
 		       "for %s\n", inet_ntoa ( iphdr->dest ) );
 		ipv4_stats.in_addr_errors++;
 		goto err_other;

From c77a7f67a3110b2b1d7d12805cba8936f60103fe Mon Sep 17 00:00:00 2001
From: Hazel Smith <hazel.smith@leicester.ac.uk>
Date: Mon, 29 May 2017 15:22:56 +0100
Subject: [PATCH 05/14] Add support for requesting RFC 3442 Classless Static
 Route DHCPv4 option, plus settings definition for it.

---
 src/include/ipxe/dhcp.h | 3 +++
 src/net/ipv4.c          | 8 ++++++++
 src/net/udp/dhcp.c      | 3 ++-
 3 files changed, 13 insertions(+), 1 deletion(-)

diff --git a/src/include/ipxe/dhcp.h b/src/include/ipxe/dhcp.h
index b7a5f004b..d8884b9c3 100644
--- a/src/include/ipxe/dhcp.h
+++ b/src/include/ipxe/dhcp.h
@@ -323,6 +323,9 @@ struct dhcp_client_uuid {
 /** DNS domain search list */
 #define DHCP_DOMAIN_SEARCH 119
 
+/** RFC 3442 Classless Static Route Option for DHCPv4 */
+#define DHCP_CLASSLESS_STATIC_ROUTES 121
+
 /** Etherboot-specific encapsulated options
  *
  * This encapsulated options field is used to contain all options
diff --git a/src/net/ipv4.c b/src/net/ipv4.c
index 5340382dc..a25615389 100644
--- a/src/net/ipv4.c
+++ b/src/net/ipv4.c
@@ -815,6 +815,14 @@ const struct setting gateway_setting __setting ( SETTING_IP4, gateway ) = {
 	.type = &setting_type_ipv4,
 };
 
+/** RFC 3442 Classless Static Routes option setting */
+const struct setting rfc3442_routes_setting __setting ( SETTING_IP4, rfc3442-routes ) = {
+	.name = "rfc3442-routes",
+	.description = "RFC 3442 Classless Static Routes",
+	.tag = DHCP_CLASSLESS_STATIC_ROUTES,
+	.type = &setting_type_hex,
+};
+
 /**
  * Send gratuitous ARP, if applicable
  *
diff --git a/src/net/udp/dhcp.c b/src/net/udp/dhcp.c
index 3a3666c9a..041137ec8 100644
--- a/src/net/udp/dhcp.c
+++ b/src/net/udp/dhcp.c
@@ -89,7 +89,8 @@ static uint8_t dhcp_request_options_data[] = {
 					      DHCP_ARCH_CLIENT_NDI ) ),
 	DHCP_USER_CLASS_ID, DHCP_STRING ( 'i', 'P', 'X', 'E' ),
 	DHCP_PARAMETER_REQUEST_LIST,
-	DHCP_OPTION ( DHCP_SUBNET_MASK, DHCP_ROUTERS, DHCP_DNS_SERVERS,
+	DHCP_OPTION ( DHCP_SUBNET_MASK, DHCP_CLASSLESS_STATIC_ROUTES,
+		      DHCP_ROUTERS, DHCP_DNS_SERVERS,
 		      DHCP_LOG_SERVERS, DHCP_HOST_NAME, DHCP_DOMAIN_NAME,
 		      DHCP_ROOT_PATH, DHCP_MTU, DHCP_VENDOR_ENCAP,
 		      DHCP_VENDOR_CLASS_ID, DHCP_TFTP_SERVER_NAME,

From dd2111f9ac792c5dd8ec96ee576710e22f3f0d9e Mon Sep 17 00:00:00 2001
From: Hazel Smith <hazel.smith@leicester.ac.uk>
Date: Mon, 29 May 2017 20:27:24 +0100
Subject: [PATCH 06/14] Initial code to insert routes based on RFC 3442 option
 121 data.

---
 src/net/ipv4.c | 85 +++++++++++++++++++++++++++++++-------------------
 1 file changed, 53 insertions(+), 32 deletions(-)

diff --git a/src/net/ipv4.c b/src/net/ipv4.c
index a25615389..49944feaa 100644
--- a/src/net/ipv4.c
+++ b/src/net/ipv4.c
@@ -880,14 +880,10 @@ static int ipv4_settings ( int ( * apply ) ( struct net_device *netdev,
 	struct in_addr netaddr = { 0 };
 	struct in_addr netmask = { 0 };
 	struct in_addr gateway = { 0 };
-	struct in_addr csr1_pixie_dest = { 0 };
-	struct in_addr csr1_pixie_mask = { 0 };
-	struct in_addr csr1_pixie_via = { 0 };
-	struct in_addr csr2_fae_dest = { 0 };
-	struct in_addr csr2_fae_mask = { 0 };
-	struct in_addr csr2_fae_via = { 0 };
 	struct in_addr zeroes_addr = { 0 }; // 0.0.0.0
-	int rc;
+	static void *rfc3442_data = NULL;
+	int rfc3442_data_len;
+	int rc = 0;
 
 	/* Process settings for each network device */
 	for_each_netdev ( netdev ) {
@@ -918,25 +914,9 @@ static int ipv4_settings ( int ( * apply ) ( struct net_device *netdev,
 		/* Get default gateway, if present */
 		fetch_ipv4_setting ( settings, &gateway_setting, &gateway );
 
-		/* Add extra miniroute */
-		if ( inet_aton ( "143.210.16.202", &csr1_pixie_dest ) == 0 )
-			return -EINVAL;
-		if ( inet_aton ( "255.255.255.255", &csr1_pixie_mask ) == 0 )
-			return -EINVAL;
-		if ( inet_aton ( "172.20.0.10", &csr1_pixie_via ) == 0 )
-			return -EINVAL;
-		if ( inet_aton ( "143.210.16.168", &csr2_fae_dest ) == 0 )
-			return -EINVAL;
-		if ( inet_aton ( "255.255.255.255", &csr2_fae_mask ) == 0 )
-			return -EINVAL;
-		if ( inet_aton ( "172.20.0.11", &csr2_fae_via ) == 0 )
-			return -EINVAL;
-
-		if ( ( rc = apply ( netdev, address, csr1_pixie_dest, csr1_pixie_mask, csr1_pixie_via ) ) != 0 )
-			return rc;
-
-		if ( ( rc = apply ( netdev, address, csr2_fae_dest, csr2_fae_mask, csr2_fae_via ) ) != 0 )
-			return rc;
+		/* Get RFC 3442 Classless Static Routes, if present */
+		rfc3442_data_len = fetch_raw_setting_copy (
+				NULL, &rfc3442_routes_setting, &rfc3442_data );
 
 		/* Calculate netaddr */
 		netaddr.s_addr = ( address.s_addr & netmask.s_addr );
@@ -948,21 +928,62 @@ static int ipv4_settings ( int ( * apply ) ( struct net_device *netdev,
 		 * netdev: netaddr/netmask via 0.0.0.0 (directly connected) src address
 		 */
 		if ( ( rc = apply ( netdev, address, netaddr, netmask, zeroes_addr ) ) != 0 )
-			return rc;
+			goto done;
 
 		/* Secondly, create route for default gateway address, *if and
-		 * only if* the interface *has* a default gateway address.
+		 * only if* the interface *has* a default gateway address *and*
+		 * no option 121 (RFC 3442 Classless Static Routes) data was received
 		 *
 		 * netdev: 0.0.0.0/0.0.0.0 via gateway src address
 		 */
-		if ( gateway.s_addr ) {
+		if ( ( gateway.s_addr ) && ( ! rfc3442_data ) ) {
 			if ( ( rc = apply ( netdev, address, zeroes_addr, zeroes_addr, gateway ) ) != 0 )
-				return rc;
+				goto done;
 		}
 
+		/* Thirdly, create Classless Static Routes if present */
+		if ( rfc3442_data ) {
+			int remaining = rfc3442_data_len;
+			int offset = 0;
+			int mask_width;
+			int mask_octets;
+			int route_len;
+			struct in_addr csr_netaddr = { 0 };
+			struct in_addr csr_netmask = { 0 };
+			struct in_addr csr_gateway = { 0 };
+
+			while ( remaining ) {
+				/* Calculate number of significant octets in mask */
+				mask_width = ((char*)rfc3442_data)[offset];
+				mask_octets = (mask_width + 7) / 8;
+				/* Calculate length of entire route in octets*/
+				route_len = 1 + mask_octets + 4;
+				remaining -= route_len;
+				if ( remaining < 0 )
+					break;
+				/* Subnet mask */
+				csr_netmask.s_addr = 0xFFFFFFFF;
+				csr_netmask.s_addr <<= (32 - mask_width);
+				/* Network address */
+				memcpy(&csr_netaddr.s_addr, ((char*)rfc3442_data +
+							     offset + 1),
+				       mask_octets);
+				csr_netaddr.s_addr &= csr_netmask.s_addr;
+				/* Router address */
+				memcpy(&csr_gateway.s_addr, ((char*)rfc3442_data +
+							     offset + 1 + mask_octets),
+				       sizeof ( csr_gateway.s_addr ));
+				/* Add route to routing table */
+				if ( ( rc = apply ( netdev, address, csr_netaddr,
+						    csr_netmask, csr_gateway ) ) != 0 )
+					goto done;
+				offset += route_len;
+			}
+		}
 	}
-
-	return 0;
+ done:
+	free ( rfc3442_data );
+	return rc;
 }
 
 /**

From 404af3954246b1bb6270374127dba12b51d67b98 Mon Sep 17 00:00:00 2001
From: Hazel Smith <hazel.smith@leicester.ac.uk>
Date: Mon, 29 May 2017 21:54:31 +0100
Subject: [PATCH 07/14] Fix bug where /32 route receives all-ones netmask
 instead of all-zeroes.

---
 src/net/ipv4.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/net/ipv4.c b/src/net/ipv4.c
index 49944feaa..04d8e434e 100644
--- a/src/net/ipv4.c
+++ b/src/net/ipv4.c
@@ -962,8 +962,8 @@ static int ipv4_settings ( int ( * apply ) ( struct net_device *netdev,
 				if ( remaining < 0 )
 					break;
 				/* Subnet mask */
-				csr_netmask.s_addr = 0xFFFFFFFF;
-				csr_netmask.s_addr <<= (32 - mask_width);
+				csr_netmask.s_addr = (mask_width > 0) ?
+						      0xFFFFFFFF << (32 - mask_width) : 0;
 				/* Network address */
 				memcpy(&csr_netaddr.s_addr, ((char*)rfc3442_data +
 							     offset + 1),

From c74a734beabfd40c545e0079d1431766c62f2b01 Mon Sep 17 00:00:00 2001
From: Hazel Smith <hazel.smith@leicester.ac.uk>
Date: Mon, 29 May 2017 23:01:01 +0100
Subject: [PATCH 08/14] Add debug prints to RFC 3442 (option 121) parsing code

---
 src/net/ipv4.c | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/src/net/ipv4.c b/src/net/ipv4.c
index 04d8e434e..80b881bee 100644
--- a/src/net/ipv4.c
+++ b/src/net/ipv4.c
@@ -943,6 +943,8 @@ static int ipv4_settings ( int ( * apply ) ( struct net_device *netdev,
 
 		/* Thirdly, create Classless Static Routes if present */
 		if ( rfc3442_data ) {
+			DBGC ( netdev, "IPv4 got %d bytes of Option 121 data\n",
+			       rfc3442_data_len );
 			int remaining = rfc3442_data_len;
 			int offset = 0;
 			int mask_width;
@@ -953,26 +955,40 @@ static int ipv4_settings ( int ( * apply ) ( struct net_device *netdev,
 			struct in_addr csr_gateway = { 0 };
 
 			while ( remaining ) {
+				DBGC ( netdev, "%d bytes of Option 121 data remaining...\n",
+				       remaining );
 				/* Calculate number of significant octets in mask */
 				mask_width = ((char*)rfc3442_data)[offset];
 				mask_octets = (mask_width + 7) / 8;
+				DBGC ( netdev, "Got mask width %d... mask octets %d... ",
+				       mask_width, mask_octets );
 				/* Calculate length of entire route in octets*/
 				route_len = 1 + mask_octets + 4;
 				remaining -= route_len;
+				DBGC ( netdev, "route record length %d... ",
+				       route_len );
 				if ( remaining < 0 )
 					break;
 				/* Subnet mask */
 				csr_netmask.s_addr = (mask_width > 0) ?
 						      0xFFFFFFFF << (32 - mask_width) : 0;
+				DBGC ( netdev, "netmask %s... ",
+				       inet_ntoa ( csr_netmask ) );
 				/* Network address */
 				memcpy(&csr_netaddr.s_addr, ((char*)rfc3442_data +
 							     offset + 1),
 				       mask_octets);
+				DBGC ( netdev, "unmasked netaddr %s... ",
+				       inet_ntoa ( csr_netaddr ) );
 				csr_netaddr.s_addr &= csr_netmask.s_addr;
+				DBGC ( netdev, "masked netaddr %s... ",
+				       inet_ntoa ( csr_netaddr ) );
 				/* Router address */
 				memcpy(&csr_gateway.s_addr, ((char*)rfc3442_data +
 							     offset + 1 + mask_octets),
 				       sizeof ( csr_gateway.s_addr ));
+				DBGC ( netdev, "gw %s.\n",
+				       inet_ntoa ( csr_gateway ) );
 				/* Add route to routing table */
 				if ( ( rc = apply ( netdev, address, csr_netaddr,
 						    csr_netmask, csr_gateway ) ) != 0 )

From bc66f22122ebb8f0f478a0b4600584f05956d411 Mon Sep 17 00:00:00 2001
From: Hazel Smith <hazel.smith@leicester.ac.uk>
Date: Tue, 30 May 2017 00:32:24 +0100
Subject: [PATCH 09/14] Use htonl(...) when generating subnet mask

---
 src/net/ipv4.c | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/src/net/ipv4.c b/src/net/ipv4.c
index 80b881bee..2f11f819d 100644
--- a/src/net/ipv4.c
+++ b/src/net/ipv4.c
@@ -970,8 +970,9 @@ static int ipv4_settings ( int ( * apply ) ( struct net_device *netdev,
 				if ( remaining < 0 )
 					break;
 				/* Subnet mask */
-				csr_netmask.s_addr = (mask_width > 0) ?
-						      0xFFFFFFFF << (32 - mask_width) : 0;
+				csr_netmask.s_addr = htonl((mask_width > 0) ?
+							   0xFFFFFFFFU << (32 - mask_width) :
+							   0);
 				DBGC ( netdev, "netmask %s... ",
 				       inet_ntoa ( csr_netmask ) );
 				/* Network address */

From 1e838cbdd4b9da2ce77058792f6009308cdb35e3 Mon Sep 17 00:00:00 2001
From: Hazel Smith <hazel.smith@leicester.ac.uk>
Date: Tue, 30 May 2017 00:40:07 +0100
Subject: [PATCH 10/14] Ensure we always free(rfc3442_data) each time around
 the for_each_netdev loop

---
 src/net/ipv4.c | 13 ++++++++-----
 1 file changed, 8 insertions(+), 5 deletions(-)

diff --git a/src/net/ipv4.c b/src/net/ipv4.c
index 2f11f819d..302d28b3e 100644
--- a/src/net/ipv4.c
+++ b/src/net/ipv4.c
@@ -883,7 +883,7 @@ static int ipv4_settings ( int ( * apply ) ( struct net_device *netdev,
 	struct in_addr zeroes_addr = { 0 }; // 0.0.0.0
 	static void *rfc3442_data = NULL;
 	int rfc3442_data_len;
-	int rc = 0;
+	int rc;
 
 	/* Process settings for each network device */
 	for_each_netdev ( netdev ) {
@@ -928,7 +928,7 @@ static int ipv4_settings ( int ( * apply ) ( struct net_device *netdev,
 		 * netdev: netaddr/netmask via 0.0.0.0 (directly connected) src address
 		 */
 		if ( ( rc = apply ( netdev, address, netaddr, netmask, zeroes_addr ) ) != 0 )
-			goto done;
+			goto err;
 
 		/* Secondly, create route for default gateway address, *if and
 		 * only if* the interface *has* a default gateway address *and*
@@ -938,7 +938,7 @@ static int ipv4_settings ( int ( * apply ) ( struct net_device *netdev,
 		 */
 		if ( ( gateway.s_addr ) && ( ! rfc3442_data ) ) {
 			if ( ( rc = apply ( netdev, address, zeroes_addr, zeroes_addr, gateway ) ) != 0 )
-				goto done;
+				goto err;
 		}
 
 		/* Thirdly, create Classless Static Routes if present */
@@ -993,12 +993,15 @@ static int ipv4_settings ( int ( * apply ) ( struct net_device *netdev,
 				/* Add route to routing table */
 				if ( ( rc = apply ( netdev, address, csr_netaddr,
 						    csr_netmask, csr_gateway ) ) != 0 )
-					goto done;
+					goto err;
 				offset += route_len;
 			}
+
+			free ( rfc3442_data );
 		}
 	}
- done:
+	return 0;
+ err:
 	free ( rfc3442_data );
 	return rc;
 }

From d588b44570517e54ea0930cd70013eebef11596e Mon Sep 17 00:00:00 2001
From: Hazel Smith <hazel.smith@leicester.ac.uk>
Date: Tue, 30 May 2017 00:55:28 +0100
Subject: [PATCH 11/14] Debug logging on invalid RFC 3442 data

---
 src/net/ipv4.c | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/src/net/ipv4.c b/src/net/ipv4.c
index 302d28b3e..941b896ce 100644
--- a/src/net/ipv4.c
+++ b/src/net/ipv4.c
@@ -967,8 +967,11 @@ static int ipv4_settings ( int ( * apply ) ( struct net_device *netdev,
 				remaining -= route_len;
 				DBGC ( netdev, "route record length %d... ",
 				       route_len );
-				if ( remaining < 0 )
+				if ( remaining < 0 ) {
+					DBGC ( netdev, "\nError: Insufficient bytes of Option 121 data remaining, expected %d. Exiting loop.\n",
+					       route_len );
 					break;
+				}
 				/* Subnet mask */
 				csr_netmask.s_addr = htonl((mask_width > 0) ?
 							   0xFFFFFFFFU << (32 - mask_width) :

From 882de7aadf3742d18962e0d191206254306c3de2 Mon Sep 17 00:00:00 2001
From: Hazel Smith <hazel.smith@leicester.ac.uk>
Date: Wed, 31 May 2017 16:17:05 +0100
Subject: [PATCH 12/14] Add extra safety checks to RFC 3442/option 121 static
 routes code

---
 src/net/ipv4.c | 36 ++++++++++++++++++++++++++----------
 1 file changed, 26 insertions(+), 10 deletions(-)

diff --git a/src/net/ipv4.c b/src/net/ipv4.c
index 941b896ce..fe52e0127 100644
--- a/src/net/ipv4.c
+++ b/src/net/ipv4.c
@@ -942,14 +942,14 @@ static int ipv4_settings ( int ( * apply ) ( struct net_device *netdev,
 		}
 
 		/* Thirdly, create Classless Static Routes if present */
-		if ( rfc3442_data ) {
+		if ( rfc3442_data_len > 0 ) {
 			DBGC ( netdev, "IPv4 got %d bytes of Option 121 data\n",
 			       rfc3442_data_len );
 			int remaining = rfc3442_data_len;
 			int offset = 0;
-			int mask_width;
-			int mask_octets;
-			int route_len;
+			unsigned int mask_width;
+			unsigned int mask_octets;
+			unsigned int route_len;
 			struct in_addr csr_netaddr = { 0 };
 			struct in_addr csr_netmask = { 0 };
 			struct in_addr csr_gateway = { 0 };
@@ -958,20 +958,29 @@ static int ipv4_settings ( int ( * apply ) ( struct net_device *netdev,
 				DBGC ( netdev, "%d bytes of Option 121 data remaining...\n",
 				       remaining );
 				/* Calculate number of significant octets in mask */
-				mask_width = ((char*)rfc3442_data)[offset];
+				mask_width = ((unsigned char*)rfc3442_data)[offset];
 				mask_octets = (mask_width + 7) / 8;
 				DBGC ( netdev, "Got mask width %d... mask octets %d... ",
 				       mask_width, mask_octets );
-				/* Calculate length of entire route in octets*/
+				/* Calculate length of entire route in octets */
 				route_len = 1 + mask_octets + 4;
-				remaining -= route_len;
 				DBGC ( netdev, "route record length %d... ",
 				       route_len );
+				/* Check bytes remaining */
+				remaining -= route_len;
 				if ( remaining < 0 ) {
 					DBGC ( netdev, "\nError: Insufficient bytes of Option 121 data remaining, expected %d. Exiting loop.\n",
 					       route_len );
 					break;
 				}
+				/* Check subnet mask length and network address
+				 * stored length are sensible
+				 */
+				if ( ( mask_width > 32 ) || ( mask_octets > 4 ) ) {
+					DBGC ( netdev, "\nError: Invalid network address length (%d octets)/subnet mask (/%d). Exiting loop.\n",
+					       mask_octets, mask_width );
+					break;
+				}
 				/* Subnet mask */
 				csr_netmask.s_addr = htonl((mask_width > 0) ?
 							   0xFFFFFFFFU << (32 - mask_width) :
@@ -979,11 +988,14 @@ static int ipv4_settings ( int ( * apply ) ( struct net_device *netdev,
 				DBGC ( netdev, "netmask %s... ",
 				       inet_ntoa ( csr_netmask ) );
 				/* Network address */
-				memcpy(&csr_netaddr.s_addr, ((char*)rfc3442_data +
-							     offset + 1),
-				       mask_octets);
+				csr_netaddr.s_addr = 0;
+				if ( mask_octets > 0 )
+					memcpy(&csr_netaddr.s_addr, ((char*)rfc3442_data +
+								     offset + 1),
+					       mask_octets);
 				DBGC ( netdev, "unmasked netaddr %s... ",
 				       inet_ntoa ( csr_netaddr ) );
+				/* Zero bits in host portion of network address */
 				csr_netaddr.s_addr &= csr_netmask.s_addr;
 				DBGC ( netdev, "masked netaddr %s... ",
 				       inet_ntoa ( csr_netaddr ) );
@@ -1000,7 +1012,11 @@ static int ipv4_settings ( int ( * apply ) ( struct net_device *netdev,
 				offset += route_len;
 			}
 
+		}
+
+		if ( rfc3442_data ) {
 			free ( rfc3442_data );
+			rfc3442_data = NULL;
 		}
 	}
 	return 0;

From 087bafe38ed087982d3e47cc5a4e63f6a9116d5c Mon Sep 17 00:00:00 2001
From: Hazel Smith <hazel.smith@leicester.ac.uk>
Date: Wed, 31 May 2017 18:11:18 +0100
Subject: [PATCH 13/14] Revert change to debug level for non-local unicast
 packet discards

---
 src/net/ipv4.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/net/ipv4.c b/src/net/ipv4.c
index fe52e0127..1fb076ed0 100644
--- a/src/net/ipv4.c
+++ b/src/net/ipv4.c
@@ -558,7 +558,7 @@ static int ipv4_rx ( struct io_buffer *iobuf,
 	     ( iphdr->dest.s_addr != INADDR_BROADCAST ) &&
 	     ipv4_has_any_addr ( netdev ) &&
 	     ( ! ipv4_has_addr ( netdev, iphdr->dest ) ) ) {
-		DBGC2 ( iphdr->src, "IPv4 discarding non-local unicast packet "
+		DBGC ( iphdr->src, "IPv4 discarding non-local unicast packet "
 		       "for %s\n", inet_ntoa ( iphdr->dest ) );
 		ipv4_stats.in_addr_errors++;
 		goto err_other;

From 2ae3a41e6f0bdb1e628e9342abbfe89b9ba3c053 Mon Sep 17 00:00:00 2001
From: Hazel Smith <hazel.smith@leicester.ac.uk>
Date: Mon, 3 Jul 2017 13:31:31 +0100
Subject: [PATCH 14/14] Remove spurious 'static' keyword from rfc3442_data void
 pointer

---
 src/net/ipv4.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/net/ipv4.c b/src/net/ipv4.c
index 1fb076ed0..333258970 100644
--- a/src/net/ipv4.c
+++ b/src/net/ipv4.c
@@ -881,7 +881,7 @@ static int ipv4_settings ( int ( * apply ) ( struct net_device *netdev,
 	struct in_addr netmask = { 0 };
 	struct in_addr gateway = { 0 };
 	struct in_addr zeroes_addr = { 0 }; // 0.0.0.0
-	static void *rfc3442_data = NULL;
+	void *rfc3442_data = NULL;
 	int rfc3442_data_len;
 	int rc;
 
